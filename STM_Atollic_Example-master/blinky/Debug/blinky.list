
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  0800019c  0800019c  0001019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006bc  080006c4  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000106c4  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001f76  00000000  00000000  000106f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000006c6  00000000  00000000  0001266a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000320  00000000  00000000  00012d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  00013050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000010d0  00000000  00000000  00013318  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000eae  00000000  00000000  000143e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015296  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c60  00000000  00000000  00015314  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800019c <__do_global_dtors_aux>:
 800019c:	b510      	push	{r4, lr}
 800019e:	4c05      	ldr	r4, [pc, #20]	; (80001b4 <__do_global_dtors_aux+0x18>)
 80001a0:	7823      	ldrb	r3, [r4, #0]
 80001a2:	b933      	cbnz	r3, 80001b2 <__do_global_dtors_aux+0x16>
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x1c>)
 80001a6:	b113      	cbz	r3, 80001ae <__do_global_dtors_aux+0x12>
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x20>)
 80001aa:	f3af 8000 	nop.w
 80001ae:	2301      	movs	r3, #1
 80001b0:	7023      	strb	r3, [r4, #0]
 80001b2:	bd10      	pop	{r4, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	00000000 	.word	0x00000000
 80001bc:	080006a4 	.word	0x080006a4

080001c0 <frame_dummy>:
 80001c0:	b508      	push	{r3, lr}
 80001c2:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <frame_dummy+0x10>)
 80001c4:	b11b      	cbz	r3, 80001ce <frame_dummy+0xe>
 80001c6:	4903      	ldr	r1, [pc, #12]	; (80001d4 <frame_dummy+0x14>)
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <frame_dummy+0x18>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	00000000 	.word	0x00000000
 80001d4:	20000004 	.word	0x20000004
 80001d8:	080006a4 	.word	0x080006a4

080001dc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]
 80001f6:	e076      	b.n	80002e6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001f8:	2201      	movs	r2, #1
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000200:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	4013      	ands	r3, r2
 800020a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	429a      	cmp	r2, r3
 8000212:	d165      	bne.n	80002e0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	2103      	movs	r1, #3
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	43db      	mvns	r3, r3
 8000224:	401a      	ands	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	4619      	mov	r1, r3
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	fa01 f303 	lsl.w	r3, r1, r3
 800023c:	431a      	orrs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d003      	beq.n	8000252 <GPIO_Init+0x76>
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	791b      	ldrb	r3, [r3, #4]
 800024e:	2b02      	cmp	r3, #2
 8000250:	d12e      	bne.n	80002b0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	689a      	ldr	r2, [r3, #8]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	2103      	movs	r1, #3
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	43db      	mvns	r3, r3
 8000262:	401a      	ands	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	4619      	mov	r1, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	431a      	orrs	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	685a      	ldr	r2, [r3, #4]
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	b29b      	uxth	r3, r3
 8000288:	4619      	mov	r1, r3
 800028a:	2301      	movs	r3, #1
 800028c:	408b      	lsls	r3, r1
 800028e:	43db      	mvns	r3, r3
 8000290:	401a      	ands	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	7992      	ldrb	r2, [r2, #6]
 800029e:	4611      	mov	r1, r2
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	b292      	uxth	r2, r2
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	b292      	uxth	r2, r2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68da      	ldr	r2, [r3, #12]
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	79db      	ldrb	r3, [r3, #7]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	3301      	adds	r3, #1
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d985      	bls.n	80001f8 <GPIO_Init+0x1c>
    }
  }
}
 80002ec:	bf00      	nop
 80002ee:	371c      	adds	r7, #28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2200      	movs	r2, #0
 8000318:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2200      	movs	r2, #0
 800031e:	71da      	strb	r2, [r3, #7]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	887b      	ldrh	r3, [r7, #2]
 800033e:	405a      	eors	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	615a      	str	r2, [r3, #20]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d006      	beq.n	8000370 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000362:	490a      	ldr	r1, [pc, #40]	; (800038c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4313      	orrs	r3, r2
 800036c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800036e:	e006      	b.n	800037e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000370:	4906      	ldr	r1, [pc, #24]	; (800038c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	43db      	mvns	r3, r3
 800037a:	4013      	ands	r3, r2
 800037c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40023800 	.word	0x40023800

08000390 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003a2:	490a      	ldr	r1, [pc, #40]	; (80003cc <RCC_APB1PeriphClockCmd+0x3c>)
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <RCC_APB1PeriphClockCmd+0x3c>)
 80003a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80003ae:	e006      	b.n	80003be <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80003b0:	4906      	ldr	r1, [pc, #24]	; (80003cc <RCC_APB1PeriphClockCmd+0x3c>)
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <RCC_APB1PeriphClockCmd+0x3c>)
 80003b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	43db      	mvns	r3, r3
 80003ba:	4013      	ands	r3, r2
 80003bc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40023800 	.word	0x40023800

080003d0 <delay>:


#include <stm32f4xx_gpio.h>
#include <stm32f4xx_rcc.h>

void delay(uint32_t ms) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    ms *= 3360;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	607b      	str	r3, [r7, #4]
    while (ms--) {
 80003e4:	e000      	b.n	80003e8 <delay+0x18>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80003e6:	bf00      	nop
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	607a      	str	r2, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f9      	bne.n	80003e6 <delay+0x16>
        __NOP();
    }
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <main>:

int main() {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000406:	2101      	movs	r1, #1
 8000408:	2004      	movs	r0, #4
 800040a:	f7ff ffa1 	bl	8000350 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800040e:	2101      	movs	r1, #1
 8000410:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000414:	f7ff ffbc 	bl	8000390 <RCC_APB1PeriphClockCmd>


	    GPIO_InitTypeDef gpioInit;
	    GPIO_StructInit(&gpioInit);
 8000418:	463b      	mov	r3, r7
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff6c 	bl	80002f8 <GPIO_StructInit>
	    gpioInit.GPIO_Mode = GPIO_Mode_OUT;
 8000420:	2301      	movs	r3, #1
 8000422:	713b      	strb	r3, [r7, #4]
	    gpioInit.GPIO_Pin = GPIO_Pin_1;
 8000424:	2302      	movs	r3, #2
 8000426:	603b      	str	r3, [r7, #0]
	    GPIO_Init(GPIOC, &gpioInit);
 8000428:	463b      	mov	r3, r7
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <main+0x44>)
 800042e:	f7ff fed5 	bl	80001dc <GPIO_Init>
    while (1) {
    	GPIO_ToggleBits(GPIOC, GPIO_Pin_1);
 8000432:	2102      	movs	r1, #2
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <main+0x44>)
 8000436:	f7ff ff79 	bl	800032c <GPIO_ToggleBits>
    	delay(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f7ff ffc8 	bl	80003d0 <delay>
    	GPIO_ToggleBits(GPIOC, GPIO_Pin_1);
 8000440:	e7f7      	b.n	8000432 <main+0x32>
 8000442:	bf00      	nop
 8000444:	40020800 	.word	0x40020800

08000448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000480 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800044c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800044e:	e003      	b.n	8000458 <LoopCopyDataInit>

08000450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000456:	3104      	adds	r1, #4

08000458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800045c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800045e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000460:	d3f6      	bcc.n	8000450 <CopyDataInit>
  ldr  r2, =_sbss
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000464:	e002      	b.n	800046c <LoopFillZerobss>

08000466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000468:	f842 3b04 	str.w	r3, [r2], #4

0800046c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800046e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000470:	d3f9      	bcc.n	8000466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000472:	f000 f841 	bl	80004f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000476:	f000 f8f1 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800047a:	f7ff ffc1 	bl	8000400 <main>
  bx  lr    
 800047e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000480:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000484:	080006c4 	.word	0x080006c4
  ldr  r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800048c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000494:	2000001c 	.word	0x2000001c

08000498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>

0800049a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <HardFault_Handler+0x4>

080004ae <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <BusFault_Handler+0x4>

080004ba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004be:	e7fe      	b.n	80004be <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <SystemInit+0x60>)
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <SystemInit+0x60>)
 8000500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <SystemInit+0x64>)
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <SystemInit+0x64>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <SystemInit+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <SystemInit+0x64>)
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <SystemInit+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SystemInit+0x64>)
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <SystemInit+0x68>)
 8000532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <SystemInit+0x64>)
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <SystemInit+0x64>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <SystemInit+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000546:	f000 f80d 	bl	8000564 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800054a:	4b03      	ldr	r3, [pc, #12]	; (8000558 <SystemInit+0x60>)
 800054c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000550:	609a      	str	r2, [r3, #8]
#endif
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	40023800 	.word	0x40023800
 8000560:	24003010 	.word	0x24003010

08000564 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000572:	4a36      	ldr	r2, [pc, #216]	; (800064c <SetSysClock+0xe8>)
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <SetSysClock+0xe8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <SetSysClock+0xe8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000586:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <SetSysClock+0x38>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800059a:	d1f0      	bne.n	800057e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SetSysClock+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005a8:	2301      	movs	r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	e001      	b.n	80005b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d142      	bne.n	800063e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005b8:	4a24      	ldr	r2, [pc, #144]	; (800064c <SetSysClock+0xe8>)
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <SetSysClock+0xe8>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SetSysClock+0xec>)
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SetSysClock+0xec>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005d0:	4a1e      	ldr	r2, [pc, #120]	; (800064c <SetSysClock+0xe8>)
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <SetSysClock+0xe8>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <SetSysClock+0xe8>)
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <SetSysClock+0xe8>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005e4:	4a19      	ldr	r2, [pc, #100]	; (800064c <SetSysClock+0xe8>)
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <SetSysClock+0xe8>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005ee:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <SetSysClock+0xe8>)
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <SetSysClock+0xf0>)
 80005f4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <SetSysClock+0xe8>)
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <SetSysClock+0xe8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000600:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000602:	bf00      	nop
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <SetSysClock+0xe8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <SetSysClock+0xf4>)
 8000612:	f240 7205 	movw	r2, #1797	; 0x705
 8000616:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <SetSysClock+0xe8>)
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <SetSysClock+0xe8>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f023 0303 	bic.w	r3, r3, #3
 8000622:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000624:	4a09      	ldr	r2, [pc, #36]	; (800064c <SetSysClock+0xe8>)
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <SetSysClock+0xe8>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000630:	bf00      	nop
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <SetSysClock+0xe8>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 030c 	and.w	r3, r3, #12
 800063a:	2b08      	cmp	r3, #8
 800063c:	d1f9      	bne.n	8000632 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000
 8000654:	07405a19 	.word	0x07405a19
 8000658:	40023c00 	.word	0x40023c00

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4e0d      	ldr	r6, [pc, #52]	; (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000662:	1ba4      	subs	r4, r4, r6
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2500      	movs	r5, #0
 8000668:	42a5      	cmp	r5, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4e0b      	ldr	r6, [pc, #44]	; (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	; (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 f818 	bl	80006a4 <_init>
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2500      	movs	r5, #0
 800067a:	42a5      	cmp	r5, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000684:	4798      	blx	r3
 8000686:	3501      	adds	r5, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800068e:	4798      	blx	r3
 8000690:	3501      	adds	r5, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	080006bc 	.word	0x080006bc
 8000698:	080006bc 	.word	0x080006bc
 800069c:	080006bc 	.word	0x080006bc
 80006a0:	080006c0 	.word	0x080006c0

080006a4 <_init>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr

080006b0 <_fini>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr
